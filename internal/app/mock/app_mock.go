// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app_mock is a generated GoMock package.
package app_mock

import (
	app "github.com/FreakyGranny/launchpad-api/internal/app"
	models "github.com/FreakyGranny/launchpad-api/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockApplication is a mock of Application interface
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// GetCategories mocks base method
func (m *MockApplication) GetCategories() ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockApplicationMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockApplication)(nil).GetCategories))
}

// GetUser mocks base method
func (m *MockApplication) GetUser(id int) (*app.ExtendedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*app.ExtendedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockApplicationMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockApplication)(nil).GetUser), id)
}

// Authentificate mocks base method
func (m *MockApplication) Authentificate(code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentificate", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentificate indicates an expected call of Authentificate
func (mr *MockApplicationMockRecorder) Authentificate(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentificate", reflect.TypeOf((*MockApplication)(nil).Authentificate), code)
}

// GetProjectTypes mocks base method
func (m *MockApplication) GetProjectTypes() ([]models.ProjectType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectTypes")
	ret0, _ := ret[0].([]models.ProjectType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectTypes indicates an expected call of GetProjectTypes
func (mr *MockApplicationMockRecorder) GetProjectTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectTypes", reflect.TypeOf((*MockApplication)(nil).GetProjectTypes))
}

// GetProject mocks base method
func (m *MockApplication) GetProject(id int) (*app.ExtendedProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", id)
	ret0, _ := ret[0].(*app.ExtendedProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockApplicationMockRecorder) GetProject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockApplication)(nil).GetProject), id)
}

// GetProjectsWithPagination mocks base method
func (m *MockApplication) GetProjectsWithPagination(category, projectType, page, pageSize int, onlyOpen bool) ([]*app.ExtendedProject, int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsWithPagination", category, projectType, page, pageSize, onlyOpen)
	ret0, _ := ret[0].([]*app.ExtendedProject)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetProjectsWithPagination indicates an expected call of GetProjectsWithPagination
func (mr *MockApplicationMockRecorder) GetProjectsWithPagination(category, projectType, page, pageSize, onlyOpen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsWithPagination", reflect.TypeOf((*MockApplication)(nil).GetProjectsWithPagination), category, projectType, page, pageSize, onlyOpen)
}

// GetUserProjects mocks base method
func (m *MockApplication) GetUserProjects(user int, onlyContributed, onlyOwned bool) ([]*app.ExtendedProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProjects", user, onlyContributed, onlyOwned)
	ret0, _ := ret[0].([]*app.ExtendedProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProjects indicates an expected call of GetUserProjects
func (mr *MockApplicationMockRecorder) GetUserProjects(user, onlyContributed, onlyOwned interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProjects", reflect.TypeOf((*MockApplication)(nil).GetUserProjects), user, onlyContributed, onlyOwned)
}

// CreateProject mocks base method
func (m *MockApplication) CreateProject(user, goalPeople, goalAmount, category, projectType int, title, subtitle, descr, imageLink, instructions string, releaseDate, eventTime time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", user, goalPeople, goalAmount, category, projectType, title, subtitle, descr, imageLink, instructions, releaseDate, eventTime)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockApplicationMockRecorder) CreateProject(user, goalPeople, goalAmount, category, projectType, title, subtitle, descr, imageLink, instructions, releaseDate, eventTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockApplication)(nil).CreateProject), user, goalPeople, goalAmount, category, projectType, title, subtitle, descr, imageLink, instructions, releaseDate, eventTime)
}

// UpdateProject mocks base method
func (m *MockApplication) UpdateProject(id, user, goalPeople, goalAmount, category, projectType int, title, subtitle, descr, imageLink, instructions string, releaseDate, eventTime time.Time, published, dropEventDate bool) (*app.ExtendedProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", id, user, goalPeople, goalAmount, category, projectType, title, subtitle, descr, imageLink, instructions, releaseDate, eventTime, published, dropEventDate)
	ret0, _ := ret[0].(*app.ExtendedProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockApplicationMockRecorder) UpdateProject(id, user, goalPeople, goalAmount, category, projectType, title, subtitle, descr, imageLink, instructions, releaseDate, eventTime, published, dropEventDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockApplication)(nil).UpdateProject), id, user, goalPeople, goalAmount, category, projectType, title, subtitle, descr, imageLink, instructions, releaseDate, eventTime, published, dropEventDate)
}

// DeleteProject mocks base method
func (m *MockApplication) DeleteProject(iserID, projectID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", iserID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockApplicationMockRecorder) DeleteProject(iserID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockApplication)(nil).DeleteProject), iserID, projectID)
}

// GetUserDonations mocks base method
func (m *MockApplication) GetUserDonations(id int) ([]models.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDonations", id)
	ret0, _ := ret[0].([]models.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDonations indicates an expected call of GetUserDonations
func (mr *MockApplicationMockRecorder) GetUserDonations(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDonations", reflect.TypeOf((*MockApplication)(nil).GetUserDonations), id)
}

// GetProjectDonations mocks base method
func (m *MockApplication) GetProjectDonations(id int) ([]app.ShortDonation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectDonations", id)
	ret0, _ := ret[0].([]app.ShortDonation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectDonations indicates an expected call of GetProjectDonations
func (mr *MockApplicationMockRecorder) GetProjectDonations(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDonations", reflect.TypeOf((*MockApplication)(nil).GetProjectDonations), id)
}

// CreateDonation mocks base method
func (m *MockApplication) CreateDonation(userID, projectID, payment int) (*models.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDonation", userID, projectID, payment)
	ret0, _ := ret[0].(*models.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDonation indicates an expected call of CreateDonation
func (mr *MockApplicationMockRecorder) CreateDonation(userID, projectID, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDonation", reflect.TypeOf((*MockApplication)(nil).CreateDonation), userID, projectID, payment)
}

// DeleteDonation mocks base method
func (m *MockApplication) DeleteDonation(donationID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDonation", donationID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDonation indicates an expected call of DeleteDonation
func (mr *MockApplicationMockRecorder) DeleteDonation(donationID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDonation", reflect.TypeOf((*MockApplication)(nil).DeleteDonation), donationID, userID)
}

// UpdateDonation mocks base method
func (m *MockApplication) UpdateDonation(donationID, userID, payment int, paid bool) (*models.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDonation", donationID, userID, payment, paid)
	ret0, _ := ret[0].(*models.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDonation indicates an expected call of UpdateDonation
func (mr *MockApplicationMockRecorder) UpdateDonation(donationID, userID, payment, paid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDonation", reflect.TypeOf((*MockApplication)(nil).UpdateDonation), donationID, userID, payment, paid)
}

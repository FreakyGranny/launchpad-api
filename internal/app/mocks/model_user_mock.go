// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/FreakyGranny/launchpad-api/internal/app/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserImpl is a mock of UserImpl interface
type MockUserImpl struct {
	ctrl     *gomock.Controller
	recorder *MockUserImplMockRecorder
}

// MockUserImplMockRecorder is the mock recorder for MockUserImpl
type MockUserImplMockRecorder struct {
	mock *MockUserImpl
}

// NewMockUserImpl creates a new mock instance
func NewMockUserImpl(ctrl *gomock.Controller) *MockUserImpl {
	mock := &MockUserImpl{ctrl: ctrl}
	mock.recorder = &MockUserImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserImpl) EXPECT() *MockUserImplMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockUserImpl) FindByID(id int) (*models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockUserImplMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserImpl)(nil).FindByID), id)
}

// Create mocks base method
func (m *MockUserImpl) Create(arg0 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserImplMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserImpl)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockUserImpl) Update(arg0 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserImplMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserImpl)(nil).Update), arg0)
}

// GetParticipation mocks base method
func (m *MockUserImpl) GetParticipation(id int) ([]models.Participation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipation", id)
	ret0, _ := ret[0].([]models.Participation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipation indicates an expected call of GetParticipation
func (mr *MockUserImplMockRecorder) GetParticipation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipation", reflect.TypeOf((*MockUserImpl)(nil).GetParticipation), id)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: project.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/FreakyGranny/launchpad-api/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProjectImpl is a mock of ProjectImpl interface
type MockProjectImpl struct {
	ctrl     *gomock.Controller
	recorder *MockProjectImplMockRecorder
}

// MockProjectImplMockRecorder is the mock recorder for MockProjectImpl
type MockProjectImplMockRecorder struct {
	mock *MockProjectImpl
}

// NewMockProjectImpl creates a new mock instance
func NewMockProjectImpl(ctrl *gomock.Controller) *MockProjectImpl {
	mock := &MockProjectImpl{ctrl: ctrl}
	mock.recorder = &MockProjectImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectImpl) EXPECT() *MockProjectImplMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockProjectImpl) Get(id int) (*models.Project, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProjectImplMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProjectImpl)(nil).Get), id)
}

// GetProjectsWithPagination mocks base method
func (m *MockProjectImpl) GetProjectsWithPagination(category, projectType, page, pageSize int, onlyOpen bool) (models.ProjectPaginatorImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsWithPagination", category, projectType, page, pageSize, onlyOpen)
	ret0, _ := ret[0].(models.ProjectPaginatorImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsWithPagination indicates an expected call of GetProjectsWithPagination
func (mr *MockProjectImplMockRecorder) GetProjectsWithPagination(category, projectType, page, pageSize, onlyOpen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsWithPagination", reflect.TypeOf((*MockProjectImpl)(nil).GetProjectsWithPagination), category, projectType, page, pageSize, onlyOpen)
}

// GetUserProjects mocks base method
func (m *MockProjectImpl) GetUserProjects(user int, contributed, owned bool) (*[]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProjects", user, contributed, owned)
	ret0, _ := ret[0].(*[]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProjects indicates an expected call of GetUserProjects
func (mr *MockProjectImplMockRecorder) GetUserProjects(user, contributed, owned interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProjects", reflect.TypeOf((*MockProjectImpl)(nil).GetUserProjects), user, contributed, owned)
}

// GetActiveProjects mocks base method
func (m *MockProjectImpl) GetActiveProjects() (*[]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProjects")
	ret0, _ := ret[0].(*[]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProjects indicates an expected call of GetActiveProjects
func (mr *MockProjectImplMockRecorder) GetActiveProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProjects", reflect.TypeOf((*MockProjectImpl)(nil).GetActiveProjects))
}

// Create mocks base method
func (m *MockProjectImpl) Create(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockProjectImplMockRecorder) Create(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectImpl)(nil).Create), p)
}

// Update mocks base method
func (m *MockProjectImpl) Update(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProjectImplMockRecorder) Update(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectImpl)(nil).Update), p)
}

// DropEventDate mocks base method
func (m *MockProjectImpl) DropEventDate(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropEventDate", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropEventDate indicates an expected call of DropEventDate
func (mr *MockProjectImplMockRecorder) DropEventDate(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropEventDate", reflect.TypeOf((*MockProjectImpl)(nil).DropEventDate), p)
}

// Delete mocks base method
func (m *MockProjectImpl) Delete(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProjectImplMockRecorder) Delete(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectImpl)(nil).Delete), p)
}

// UpdateTotalByPayment mocks base method
func (m *MockProjectImpl) UpdateTotalByPayment(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotalByPayment", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotalByPayment indicates an expected call of UpdateTotalByPayment
func (mr *MockProjectImplMockRecorder) UpdateTotalByPayment(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotalByPayment", reflect.TypeOf((*MockProjectImpl)(nil).UpdateTotalByPayment), p)
}

// UpdateTotalByCount mocks base method
func (m *MockProjectImpl) UpdateTotalByCount(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotalByCount", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotalByCount indicates an expected call of UpdateTotalByCount
func (mr *MockProjectImplMockRecorder) UpdateTotalByCount(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotalByCount", reflect.TypeOf((*MockProjectImpl)(nil).UpdateTotalByCount), p)
}

// Lock mocks base method
func (m *MockProjectImpl) Lock(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockProjectImplMockRecorder) Lock(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockProjectImpl)(nil).Lock), p)
}

// Close mocks base method
func (m *MockProjectImpl) Close(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockProjectImplMockRecorder) Close(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProjectImpl)(nil).Close), p)
}

// CheckForPaid mocks base method
func (m *MockProjectImpl) CheckForPaid(projectID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForPaid", projectID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForPaid indicates an expected call of CheckForPaid
func (mr *MockProjectImplMockRecorder) CheckForPaid(projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForPaid", reflect.TypeOf((*MockProjectImpl)(nil).CheckForPaid), projectID)
}

// SetEqualDonation mocks base method
func (m *MockProjectImpl) SetEqualDonation(p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEqualDonation", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEqualDonation indicates an expected call of SetEqualDonation
func (mr *MockProjectImplMockRecorder) SetEqualDonation(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEqualDonation", reflect.TypeOf((*MockProjectImpl)(nil).SetEqualDonation), p)
}

// MockProjectPaginatorImpl is a mock of ProjectPaginatorImpl interface
type MockProjectPaginatorImpl struct {
	ctrl     *gomock.Controller
	recorder *MockProjectPaginatorImplMockRecorder
}

// MockProjectPaginatorImplMockRecorder is the mock recorder for MockProjectPaginatorImpl
type MockProjectPaginatorImplMockRecorder struct {
	mock *MockProjectPaginatorImpl
}

// NewMockProjectPaginatorImpl creates a new mock instance
func NewMockProjectPaginatorImpl(ctrl *gomock.Controller) *MockProjectPaginatorImpl {
	mock := &MockProjectPaginatorImpl{ctrl: ctrl}
	mock.recorder = &MockProjectPaginatorImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectPaginatorImpl) EXPECT() *MockProjectPaginatorImplMockRecorder {
	return m.recorder
}

// NextPage mocks base method
func (m *MockProjectPaginatorImpl) NextPage() (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage
func (mr *MockProjectPaginatorImplMockRecorder) NextPage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockProjectPaginatorImpl)(nil).NextPage))
}

// Retrieve mocks base method
func (m *MockProjectPaginatorImpl) Retrieve() (*[]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve")
	ret0, _ := ret[0].(*[]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockProjectPaginatorImplMockRecorder) Retrieve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockProjectPaginatorImpl)(nil).Retrieve))
}

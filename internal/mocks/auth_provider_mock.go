// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	auth "github.com/FreakyGranny/launchpad-api/internal/auth"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method
func (m *MockProvider) GetAccessToken(code string) (*auth.AccessData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", code)
	ret0, _ := ret[0].(*auth.AccessData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken
func (mr *MockProviderMockRecorder) GetAccessToken(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockProvider)(nil).GetAccessToken), code)
}

// GetUserData mocks base method
func (m *MockProvider) GetUserData(userID int, token string) (*auth.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", userID, token)
	ret0, _ := ret[0].(*auth.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData
func (mr *MockProviderMockRecorder) GetUserData(userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockProvider)(nil).GetUserData), userID, token)
}
